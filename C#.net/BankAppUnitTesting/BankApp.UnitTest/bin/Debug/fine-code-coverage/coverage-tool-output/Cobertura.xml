<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE coverage SYSTEM "http://cobertura.sourceforge.net/xml/coverage-04.dtd">
<coverage line-rate="0.200953826143507" branch-rate="0.113397129186603" lines-covered="927" lines-valid="4613" branches-covered="237" branches-valid="2090" complexity="2002" version="0" timestamp="1677953822">
  <sources />
  <packages>
    <package name="BankApp.BusinessLayer" line-rate="0.917431192660551" branch-rate="1" complexity="33">
      <classes>
        <class name="BankApp.BusinessLayer.MoreThan3TransactionsTodayException" filename="C:\Users\Adnim\source\repos\BankAppUnitTesting\BankApp.BusinessLayer\MoreThan3TransactionsTodayException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="11" hits="3" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="11" hits="3" branch="false" />
          </lines>
        </class>
        <class name="BankApp.BusinessLayer.NotificationSender" filename="C:\Users\Adnim\source\repos\BankAppUnitTesting\BankApp.BusinessLayer\NotificationSender.cs" line-rate="0" branch-rate="1" complexity="NaN">
          <methods>
            <method name="EmailNotificationForWithdrawl" signature="(System.Double)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="12" hits="0" branch="false" />
                <line number="13" hits="0" branch="false" />
                <line number="14" hits="0" branch="false" />
              </lines>
            </method>
            <method name="EmailNotificationForDeposition" signature="(System.Double)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="16" hits="0" branch="false" />
                <line number="17" hits="0" branch="false" />
                <line number="18" hits="0" branch="false" />
              </lines>
            </method>
            <method name="EmailNotificationForTransfer" signature="(System.Double)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="20" hits="0" branch="false" />
                <line number="21" hits="0" branch="false" />
                <line number="22" hits="0" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="12" hits="0" branch="false" />
            <line number="13" hits="0" branch="false" />
            <line number="14" hits="0" branch="false" />
            <line number="16" hits="0" branch="false" />
            <line number="17" hits="0" branch="false" />
            <line number="18" hits="0" branch="false" />
            <line number="20" hits="0" branch="false" />
            <line number="21" hits="0" branch="false" />
            <line number="22" hits="0" branch="false" />
          </lines>
        </class>
        <class name="BankAppExceptions.Account" filename="C:\Users\Adnim\source\repos\BankAppUnitTesting\BankApp.BusinessLayer\Account.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Accno" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="12" hits="39" branch="false" />
              </lines>
            </method>
            <method name="Accno" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="12" hits="39" branch="false" />
              </lines>
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="13" hits="53" branch="false" />
              </lines>
            </method>
            <method name="Name" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="13" hits="53" branch="false" />
              </lines>
            </method>
            <method name="Balance" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="14" hits="91" branch="false" />
              </lines>
            </method>
            <method name="Balance" signature="(System.Double)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="14" hits="91" branch="false" />
              </lines>
            </method>
            <method name="Pin" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="15" hits="42" branch="false" />
              </lines>
            </method>
            <method name="Pin" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="15" hits="42" branch="false" />
              </lines>
            </method>
            <method name="isActive" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="16" hits="43" branch="false" />
              </lines>
            </method>
            <method name="isActive" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="16" hits="43" branch="false" />
              </lines>
            </method>
            <method name="OpeningDate" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="17" hits="34" branch="false" />
              </lines>
            </method>
            <method name="OpeningDate" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="17" hits="34" branch="false" />
              </lines>
            </method>
            <method name="ClosingDate" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="18" hits="48" branch="false" />
              </lines>
            </method>
            <method name="ClosingDate" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="18" hits="48" branch="false" />
              </lines>
            </method>
            <method name="TransactionsToday" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="19" hits="27" branch="false" />
              </lines>
            </method>
            <method name="TransactionsToday" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="19" hits="27" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="12" hits="39" branch="false" />
            <line number="13" hits="53" branch="false" />
            <line number="14" hits="91" branch="false" />
            <line number="15" hits="42" branch="false" />
            <line number="16" hits="43" branch="false" />
            <line number="17" hits="34" branch="false" />
            <line number="18" hits="48" branch="false" />
            <line number="19" hits="27" branch="false" />
          </lines>
        </class>
        <class name="BankAppExceptions.AccountException" filename="C:\Users\Adnim\source\repos\BankAppUnitTesting\BankApp.BusinessLayer\AccountException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="11" hits="13" branch="false" />
                <line number="12" hits="13" branch="false" />
                <line number="13" hits="13" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="11" hits="13" branch="false" />
            <line number="12" hits="13" branch="false" />
            <line number="13" hits="13" branch="false" />
          </lines>
        </class>
        <class name="BankAppExceptions.AccountManager" filename="C:\Users\Adnim\source\repos\BankAppUnitTesting\BankApp.BusinessLayer\AccountManager.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Accounts" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="21" hits="179" branch="false" />
              </lines>
            </method>
            <method name="Accounts" signature="(System.Collections.Generic.List`1&lt;BankAppExceptions.Account&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="21" hits="179" branch="false" />
              </lines>
            </method>
            <method name=".ctor" signature="(BankApp.DataAccessLayer.IDataStorage,BankApp.BusinessLayer.NotificationSender)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="16" hits="29" branch="false" />
                <line number="17" hits="29" branch="false" />
                <line number="18" hits="29" branch="false" />
                <line number="19" hits="29" branch="false" />
                <line number="20" hits="29" branch="false" />
                <line number="21" hits="179" branch="false" />
              </lines>
            </method>
            <method name="OpenAccount" signature="(BankAppExceptions.Account)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="23" hits="36" branch="false" />
                <line number="24" hits="36" branch="true" condition-coverage="100% (4/4)" />
                <line number="25" hits="1" branch="false" />
                <line number="26" hits="1" branch="false" />
                <line number="28" hits="35" branch="true" condition-coverage="100% (4/4)" />
                <line number="29" hits="1" branch="false" />
                <line number="30" hits="1" branch="false" />
                <line number="32" hits="34" branch="false" />
                <line number="33" hits="34" branch="false" />
                <line number="34" hits="34" branch="false" />
                <line number="35" hits="34" branch="false" />
              </lines>
            </method>
            <method name="CloseAccount" signature="(BankAppExceptions.Account)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="37" hits="10" branch="false" />
                <line number="38" hits="10" branch="true" condition-coverage="100% (2/2)" />
                <line number="39" hits="1" branch="false" />
                <line number="40" hits="1" branch="false" />
                <line number="42" hits="9" branch="true" condition-coverage="100% (2/2)" />
                <line number="43" hits="1" branch="false" />
                <line number="44" hits="1" branch="false" />
                <line number="46" hits="8" branch="true" condition-coverage="100% (2/2)" />
                <line number="47" hits="1" branch="false" />
                <line number="48" hits="1" branch="false" />
                <line number="50" hits="7" branch="false" />
                <line number="51" hits="7" branch="false" />
                <line number="52" hits="7" branch="false" />
              </lines>
            </method>
            <method name="Withdraw" signature="(BankAppExceptions.Account,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="54" hits="7" branch="false" />
                <line number="55" hits="7" branch="true" condition-coverage="100% (2/2)" />
                <line number="56" hits="1" branch="false" />
                <line number="57" hits="1" branch="false" />
                <line number="60" hits="6" branch="true" condition-coverage="100% (2/2)" />
                <line number="61" hits="1" branch="false" />
                <line number="62" hits="1" branch="false" />
                <line number="64" hits="5" branch="true" condition-coverage="100% (2/2)" />
                <line number="65" hits="1" branch="false" />
                <line number="66" hits="1" branch="false" />
                <line number="68" hits="4" branch="true" condition-coverage="100% (2/2)" />
                <line number="69" hits="1" branch="false" />
                <line number="70" hits="1" branch="false" />
                <line number="72" hits="3" branch="true" condition-coverage="100% (2/2)" />
                <line number="73" hits="1" branch="false" />
                <line number="74" hits="1" branch="false" />
                <line number="76" hits="2" branch="false" />
                <line number="77" hits="2" branch="false" />
                <line number="78" hits="2" branch="false" />
              </lines>
            </method>
            <method name="Deposit" signature="(BankAppExceptions.Account,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="80" hits="5" branch="false" />
                <line number="81" hits="5" branch="true" condition-coverage="100% (2/2)" />
                <line number="82" hits="1" branch="false" />
                <line number="83" hits="1" branch="false" />
                <line number="86" hits="4" branch="true" condition-coverage="100% (2/2)" />
                <line number="87" hits="1" branch="false" />
                <line number="88" hits="1" branch="false" />
                <line number="90" hits="3" branch="true" condition-coverage="100% (2/2)" />
                <line number="91" hits="1" branch="false" />
                <line number="92" hits="1" branch="false" />
                <line number="94" hits="2" branch="false" />
                <line number="95" hits="2" branch="false" />
                <line number="96" hits="2" branch="false" />
              </lines>
            </method>
            <method name="Transfer" signature="(BankAppExceptions.Account,System.Int32,BankAppExceptions.Account)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="98" hits="13" branch="false" />
                <line number="99" hits="13" branch="true" condition-coverage="100% (2/2)" />
                <line number="100" hits="1" branch="false" />
                <line number="101" hits="1" branch="false" />
                <line number="103" hits="12" branch="true" condition-coverage="100% (2/2)" />
                <line number="104" hits="1" branch="false" />
                <line number="105" hits="1" branch="false" />
                <line number="108" hits="11" branch="true" condition-coverage="100% (2/2)" />
                <line number="109" hits="1" branch="false" />
                <line number="110" hits="1" branch="false" />
                <line number="113" hits="10" branch="true" condition-coverage="100% (2/2)" />
                <line number="114" hits="1" branch="false" />
                <line number="115" hits="1" branch="false" />
                <line number="117" hits="9" branch="true" condition-coverage="100% (2/2)" />
                <line number="118" hits="1" branch="false" />
                <line number="119" hits="1" branch="false" />
                <line number="121" hits="8" branch="true" condition-coverage="100% (2/2)" />
                <line number="122" hits="1" branch="false" />
                <line number="123" hits="1" branch="false" />
                <line number="125" hits="7" branch="false" />
                <line number="126" hits="7" branch="false" />
                <line number="127" hits="7" branch="false" />
                <line number="128" hits="7" branch="false" />
                <line number="129" hits="7" branch="false" />
                <line number="130" hits="7" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="16" hits="29" branch="false" />
            <line number="17" hits="29" branch="false" />
            <line number="18" hits="29" branch="false" />
            <line number="19" hits="29" branch="false" />
            <line number="20" hits="29" branch="false" />
            <line number="21" hits="179" branch="false" />
            <line number="23" hits="36" branch="false" />
            <line number="24" hits="36" branch="true" condition-coverage="100% (4/4)" />
            <line number="25" hits="1" branch="false" />
            <line number="26" hits="1" branch="false" />
            <line number="28" hits="35" branch="true" condition-coverage="100% (4/4)" />
            <line number="29" hits="1" branch="false" />
            <line number="30" hits="1" branch="false" />
            <line number="32" hits="34" branch="false" />
            <line number="33" hits="34" branch="false" />
            <line number="34" hits="34" branch="false" />
            <line number="35" hits="34" branch="false" />
            <line number="37" hits="10" branch="false" />
            <line number="38" hits="10" branch="true" condition-coverage="100% (2/2)" />
            <line number="39" hits="1" branch="false" />
            <line number="40" hits="1" branch="false" />
            <line number="42" hits="9" branch="true" condition-coverage="100% (2/2)" />
            <line number="43" hits="1" branch="false" />
            <line number="44" hits="1" branch="false" />
            <line number="46" hits="8" branch="true" condition-coverage="100% (2/2)" />
            <line number="47" hits="1" branch="false" />
            <line number="48" hits="1" branch="false" />
            <line number="50" hits="7" branch="false" />
            <line number="51" hits="7" branch="false" />
            <line number="52" hits="7" branch="false" />
            <line number="54" hits="7" branch="false" />
            <line number="55" hits="7" branch="true" condition-coverage="100% (2/2)" />
            <line number="56" hits="1" branch="false" />
            <line number="57" hits="1" branch="false" />
            <line number="60" hits="6" branch="true" condition-coverage="100% (2/2)" />
            <line number="61" hits="1" branch="false" />
            <line number="62" hits="1" branch="false" />
            <line number="64" hits="5" branch="true" condition-coverage="100% (2/2)" />
            <line number="65" hits="1" branch="false" />
            <line number="66" hits="1" branch="false" />
            <line number="68" hits="4" branch="true" condition-coverage="100% (2/2)" />
            <line number="69" hits="1" branch="false" />
            <line number="70" hits="1" branch="false" />
            <line number="72" hits="3" branch="true" condition-coverage="100% (2/2)" />
            <line number="73" hits="1" branch="false" />
            <line number="74" hits="1" branch="false" />
            <line number="76" hits="2" branch="false" />
            <line number="77" hits="2" branch="false" />
            <line number="78" hits="2" branch="false" />
            <line number="80" hits="5" branch="false" />
            <line number="81" hits="5" branch="true" condition-coverage="100% (2/2)" />
            <line number="82" hits="1" branch="false" />
            <line number="83" hits="1" branch="false" />
            <line number="86" hits="4" branch="true" condition-coverage="100% (2/2)" />
            <line number="87" hits="1" branch="false" />
            <line number="88" hits="1" branch="false" />
            <line number="90" hits="3" branch="true" condition-coverage="100% (2/2)" />
            <line number="91" hits="1" branch="false" />
            <line number="92" hits="1" branch="false" />
            <line number="94" hits="2" branch="false" />
            <line number="95" hits="2" branch="false" />
            <line number="96" hits="2" branch="false" />
            <line number="98" hits="13" branch="false" />
            <line number="99" hits="13" branch="true" condition-coverage="100% (2/2)" />
            <line number="100" hits="1" branch="false" />
            <line number="101" hits="1" branch="false" />
            <line number="103" hits="12" branch="true" condition-coverage="100% (2/2)" />
            <line number="104" hits="1" branch="false" />
            <line number="105" hits="1" branch="false" />
            <line number="108" hits="11" branch="true" condition-coverage="100% (2/2)" />
            <line number="109" hits="1" branch="false" />
            <line number="110" hits="1" branch="false" />
            <line number="113" hits="10" branch="true" condition-coverage="100% (2/2)" />
            <line number="114" hits="1" branch="false" />
            <line number="115" hits="1" branch="false" />
            <line number="117" hits="9" branch="true" condition-coverage="100% (2/2)" />
            <line number="118" hits="1" branch="false" />
            <line number="119" hits="1" branch="false" />
            <line number="121" hits="8" branch="true" condition-coverage="100% (2/2)" />
            <line number="122" hits="1" branch="false" />
            <line number="123" hits="1" branch="false" />
            <line number="125" hits="7" branch="false" />
            <line number="126" hits="7" branch="false" />
            <line number="127" hits="7" branch="false" />
            <line number="128" hits="7" branch="false" />
            <line number="129" hits="7" branch="false" />
            <line number="130" hits="7" branch="false" />
          </lines>
        </class>
        <class name="BankAppExceptions.OperationException" filename="C:\Users\Adnim\source\repos\BankAppUnitTesting\BankApp.BusinessLayer\OperationException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.String,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines>
                <line number="11" hits="15" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="11" hits="15" branch="false" />
          </lines>
        </class>
      </classes>
    </package>
    <package name="BankApp.DataAccessLayer" line-rate="0" branch-rate="1" complexity="1">
      <classes>
        <class name="BankApp.DataAccessLayer.DBDataStorage" filename="C:\Users\Adnim\source\repos\BankAppUnitTesting\BankApp.DataAccessLayer\DBDataStorage.cs" line-rate="0" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Save" signature="(System.String)" line-rate="0" branch-rate="1" complexity="NaN">
              <lines>
                <line number="12" hits="0" branch="false" />
                <line number="13" hits="0" branch="false" />
                <line number="14" hits="0" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="12" hits="0" branch="false" />
            <line number="13" hits="0" branch="false" />
            <line number="14" hits="0" branch="false" />
          </lines>
        </class>
      </classes>
    </package>
    <package name="BankApp.UnitTest" line-rate="0.904040404040404" branch-rate="1" complexity="31">
      <classes>
        <class name="BankApp.UnitTest.UnitTest1" filename="C:\Users\Adnim\source\repos\BankAppUnitTesting\BankApp.UnitTest\UnitTest1.cs" line-rate="0.904040404040404" branch-rate="1" complexity="31">
          <methods>
            <method name="Init" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="19" hits="29" branch="false" />
                <line number="20" hits="29" branch="false" />
                <line number="21" hits="29" branch="false" />
                <line number="22" hits="29" branch="false" />
                <line number="23" hits="29" branch="false" />
                <line number="24" hits="29" branch="false" />
                <line number="25" hits="29" branch="false" />
                <line number="26" hits="29" branch="false" />
                <line number="27" hits="29" branch="false" />
              </lines>
            </method>
            <method name="Cleanup" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="30" hits="29" branch="false" />
                <line number="31" hits="29" branch="false" />
                <line number="32" hits="29" branch="false" />
                <line number="33" hits="29" branch="false" />
                <line number="34" hits="29" branch="false" />
              </lines>
            </method>
            <method name="AccountOpeningOnlyOnce" signature="()" line-rate="0.833333333333333" branch-rate="1" complexity="1">
              <lines>
                <line number="38" hits="1" branch="false" />
                <line number="39" hits="1" branch="false" />
                <line number="40" hits="1" branch="false" />
                <line number="41" hits="1" branch="false" />
                <line number="42" hits="1" branch="false" />
                <line number="43" hits="0" branch="false" />
              </lines>
            </method>
            <method name="ClosingAnAccountNotPresent" signature="()" line-rate="0.75" branch-rate="1" complexity="1">
              <lines>
                <line number="47" hits="1" branch="false" />
                <line number="48" hits="1" branch="false" />
                <line number="49" hits="1" branch="false" />
                <line number="50" hits="0" branch="false" />
              </lines>
            </method>
            <method name="ClosingAnAccountAlreadyClosed" signature="()" line-rate="0.833333333333333" branch-rate="1" complexity="1">
              <lines>
                <line number="54" hits="1" branch="false" />
                <line number="55" hits="1" branch="false" />
                <line number="56" hits="1" branch="false" />
                <line number="57" hits="1" branch="false" />
                <line number="58" hits="1" branch="false" />
                <line number="59" hits="0" branch="false" />
              </lines>
            </method>
            <method name="ClosingAnAccountWithBalanceMoreThanZero" signature="()" line-rate="0.8" branch-rate="1" complexity="1">
              <lines>
                <line number="63" hits="1" branch="false" />
                <line number="64" hits="1" branch="false" />
                <line number="65" hits="1" branch="false" />
                <line number="66" hits="1" branch="false" />
                <line number="67" hits="0" branch="false" />
              </lines>
            </method>
            <method name="OpeningAccountAlreadyOpen" signature="()" line-rate="0.8" branch-rate="1" complexity="1">
              <lines>
                <line number="71" hits="1" branch="false" />
                <line number="72" hits="1" branch="false" />
                <line number="73" hits="1" branch="false" />
                <line number="74" hits="1" branch="false" />
                <line number="75" hits="0" branch="false" />
              </lines>
            </method>
            <method name="AccountClosedWhileWithdrawing" signature="()" line-rate="0.833333333333333" branch-rate="1" complexity="1">
              <lines>
                <line number="79" hits="1" branch="false" />
                <line number="80" hits="1" branch="false" />
                <line number="81" hits="1" branch="false" />
                <line number="82" hits="1" branch="false" />
                <line number="83" hits="1" branch="false" />
                <line number="84" hits="0" branch="false" />
              </lines>
            </method>
            <method name="AccountNotFoundWhileWithdrawing" signature="()" line-rate="0.75" branch-rate="1" complexity="1">
              <lines>
                <line number="88" hits="1" branch="false" />
                <line number="89" hits="1" branch="false" />
                <line number="90" hits="1" branch="false" />
                <line number="91" hits="0" branch="false" />
              </lines>
            </method>
            <method name="WrongPinWhileWithdrawing" signature="()" line-rate="0.8" branch-rate="1" complexity="1">
              <lines>
                <line number="95" hits="1" branch="false" />
                <line number="96" hits="1" branch="false" />
                <line number="97" hits="1" branch="false" />
                <line number="98" hits="1" branch="false" />
                <line number="99" hits="0" branch="false" />
              </lines>
            </method>
            <method name="AmountLessThanZeroWhileWithdrawing" signature="()" line-rate="0.8" branch-rate="1" complexity="1">
              <lines>
                <line number="103" hits="1" branch="false" />
                <line number="104" hits="1" branch="false" />
                <line number="105" hits="1" branch="false" />
                <line number="106" hits="1" branch="false" />
                <line number="107" hits="0" branch="false" />
              </lines>
            </method>
            <method name="AmountMoreThanBalanceWhileWithdrawing" signature="()" line-rate="0.8" branch-rate="1" complexity="1">
              <lines>
                <line number="111" hits="1" branch="false" />
                <line number="112" hits="1" branch="false" />
                <line number="113" hits="1" branch="false" />
                <line number="114" hits="1" branch="false" />
                <line number="115" hits="0" branch="false" />
              </lines>
            </method>
            <method name="AccountClosedWhileDepositing" signature="()" line-rate="0.833333333333333" branch-rate="1" complexity="1">
              <lines>
                <line number="119" hits="1" branch="false" />
                <line number="120" hits="1" branch="false" />
                <line number="121" hits="1" branch="false" />
                <line number="122" hits="1" branch="false" />
                <line number="123" hits="1" branch="false" />
                <line number="124" hits="0" branch="false" />
              </lines>
            </method>
            <method name="AccountNotFoundWhileDepositing" signature="()" line-rate="0.75" branch-rate="1" complexity="1">
              <lines>
                <line number="128" hits="1" branch="false" />
                <line number="129" hits="1" branch="false" />
                <line number="130" hits="1" branch="false" />
                <line number="131" hits="0" branch="false" />
              </lines>
            </method>
            <method name="AmountLessThanZeroWhileDepositing" signature="()" line-rate="0.8" branch-rate="1" complexity="1">
              <lines>
                <line number="135" hits="1" branch="false" />
                <line number="136" hits="1" branch="false" />
                <line number="137" hits="1" branch="false" />
                <line number="138" hits="1" branch="false" />
                <line number="139" hits="0" branch="false" />
              </lines>
            </method>
            <method name="FromAccountClosedWhileTransfering" signature="()" line-rate="0.875" branch-rate="1" complexity="1">
              <lines>
                <line number="143" hits="1" branch="false" />
                <line number="144" hits="1" branch="false" />
                <line number="145" hits="1" branch="false" />
                <line number="146" hits="1" branch="false" />
                <line number="147" hits="1" branch="false" />
                <line number="148" hits="1" branch="false" />
                <line number="149" hits="1" branch="false" />
                <line number="150" hits="0" branch="false" />
              </lines>
            </method>
            <method name="FromAccountNotFoundWhileTransfering" signature="()" line-rate="0.833333333333333" branch-rate="1" complexity="1">
              <lines>
                <line number="154" hits="1" branch="false" />
                <line number="155" hits="1" branch="false" />
                <line number="156" hits="1" branch="false" />
                <line number="157" hits="1" branch="false" />
                <line number="158" hits="1" branch="false" />
                <line number="159" hits="0" branch="false" />
              </lines>
            </method>
            <method name="ToAccountClosedWhileTransfering" signature="()" line-rate="0.875" branch-rate="1" complexity="1">
              <lines>
                <line number="163" hits="1" branch="false" />
                <line number="164" hits="1" branch="false" />
                <line number="165" hits="1" branch="false" />
                <line number="166" hits="1" branch="false" />
                <line number="167" hits="1" branch="false" />
                <line number="168" hits="1" branch="false" />
                <line number="169" hits="1" branch="false" />
                <line number="170" hits="0" branch="false" />
              </lines>
            </method>
            <method name="ToAccountNotFoundWhileTransfering" signature="()" line-rate="0.833333333333333" branch-rate="1" complexity="1">
              <lines>
                <line number="174" hits="1" branch="false" />
                <line number="175" hits="1" branch="false" />
                <line number="176" hits="1" branch="false" />
                <line number="177" hits="1" branch="false" />
                <line number="178" hits="1" branch="false" />
                <line number="179" hits="0" branch="false" />
              </lines>
            </method>
            <method name="AmountLessThanZeroWhileTransfering" signature="()" line-rate="0.857142857142857" branch-rate="1" complexity="1">
              <lines>
                <line number="183" hits="1" branch="false" />
                <line number="184" hits="1" branch="false" />
                <line number="185" hits="1" branch="false" />
                <line number="186" hits="1" branch="false" />
                <line number="187" hits="1" branch="false" />
                <line number="188" hits="1" branch="false" />
                <line number="189" hits="0" branch="false" />
              </lines>
            </method>
            <method name="TestingDeposition" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="192" hits="1" branch="false" />
                <line number="193" hits="1" branch="false" />
                <line number="194" hits="1" branch="false" />
                <line number="195" hits="1" branch="false" />
                <line number="196" hits="1" branch="false" />
                <line number="197" hits="1" branch="false" />
                <line number="198" hits="1" branch="false" />
              </lines>
            </method>
            <method name="TestingWithdrawl" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="201" hits="1" branch="false" />
                <line number="202" hits="1" branch="false" />
                <line number="203" hits="1" branch="false" />
                <line number="204" hits="1" branch="false" />
                <line number="205" hits="1" branch="false" />
                <line number="206" hits="1" branch="false" />
                <line number="207" hits="1" branch="false" />
              </lines>
            </method>
            <method name="TestingTransfer_SenderBalance" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="210" hits="1" branch="false" />
                <line number="211" hits="1" branch="false" />
                <line number="212" hits="1" branch="false" />
                <line number="213" hits="1" branch="false" />
                <line number="214" hits="1" branch="false" />
                <line number="215" hits="1" branch="false" />
                <line number="216" hits="1" branch="false" />
                <line number="217" hits="1" branch="false" />
                <line number="218" hits="1" branch="false" />
              </lines>
            </method>
            <method name="TestingTransfer_ReceiverBalance" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="221" hits="1" branch="false" />
                <line number="222" hits="1" branch="false" />
                <line number="223" hits="1" branch="false" />
                <line number="224" hits="1" branch="false" />
                <line number="225" hits="1" branch="false" />
                <line number="226" hits="1" branch="false" />
                <line number="227" hits="1" branch="false" />
                <line number="228" hits="1" branch="false" />
                <line number="229" hits="1" branch="false" />
              </lines>
            </method>
            <method name="TestingOpenAccount" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="232" hits="1" branch="false" />
                <line number="233" hits="1" branch="false" />
                <line number="234" hits="1" branch="false" />
                <line number="235" hits="1" branch="false" />
                <line number="236" hits="1" branch="false" />
                <line number="237" hits="1" branch="false" />
              </lines>
            </method>
            <method name="TestingCloseAccount" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="240" hits="1" branch="false" />
                <line number="241" hits="1" branch="false" />
                <line number="242" hits="1" branch="false" />
                <line number="243" hits="1" branch="false" />
                <line number="244" hits="1" branch="false" />
                <line number="245" hits="1" branch="false" />
                <line number="246" hits="1" branch="false" />
              </lines>
            </method>
            <method name="TransferDataStoredInDB" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="249" hits="1" branch="false" />
                <line number="250" hits="1" branch="false" />
                <line number="251" hits="1" branch="false" />
                <line number="252" hits="1" branch="false" />
                <line number="253" hits="1" branch="false" />
                <line number="254" hits="1" branch="false" />
                <line number="255" hits="1" branch="false" />
                <line number="256" hits="1" branch="false" />
              </lines>
            </method>
            <method name="TestingMoreThan3TransactionsToday" signature="()" line-rate="0.9" branch-rate="1" complexity="1">
              <lines>
                <line number="260" hits="1" branch="false" />
                <line number="261" hits="1" branch="false" />
                <line number="262" hits="1" branch="false" />
                <line number="263" hits="1" branch="false" />
                <line number="264" hits="1" branch="false" />
                <line number="265" hits="1" branch="false" />
                <line number="266" hits="1" branch="false" />
                <line number="267" hits="1" branch="false" />
                <line number="268" hits="1" branch="false" />
                <line number="269" hits="0" branch="false" />
              </lines>
            </method>
            <method name="TestingNotificationSenderForWithdrawl" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="272" hits="1" branch="false" />
                <line number="273" hits="1" branch="false" />
                <line number="274" hits="1" branch="false" />
                <line number="275" hits="1" branch="false" />
                <line number="276" hits="1" branch="false" />
                <line number="277" hits="1" branch="false" />
              </lines>
            </method>
            <method name="TestingNotificationSenderForDeposition" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="280" hits="1" branch="false" />
                <line number="281" hits="1" branch="false" />
                <line number="282" hits="1" branch="false" />
                <line number="283" hits="1" branch="false" />
                <line number="284" hits="1" branch="false" />
                <line number="285" hits="1" branch="false" />
              </lines>
            </method>
            <method name="TestingNotificationSenderForTransfer" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines>
                <line number="288" hits="1" branch="false" />
                <line number="289" hits="1" branch="false" />
                <line number="290" hits="1" branch="false" />
                <line number="291" hits="1" branch="false" />
                <line number="292" hits="1" branch="false" />
                <line number="293" hits="1" branch="false" />
                <line number="294" hits="1" branch="false" />
                <line number="295" hits="1" branch="false" />
              </lines>
            </method>
          </methods>
          <lines>
            <line number="19" hits="29" branch="false" />
            <line number="20" hits="29" branch="false" />
            <line number="21" hits="29" branch="false" />
            <line number="22" hits="29" branch="false" />
            <line number="23" hits="29" branch="false" />
            <line number="24" hits="29" branch="false" />
            <line number="25" hits="29" branch="false" />
            <line number="26" hits="29" branch="false" />
            <line number="27" hits="29" branch="false" />
            <line number="30" hits="29" branch="false" />
            <line number="31" hits="29" branch="false" />
            <line number="32" hits="29" branch="false" />
            <line number="33" hits="29" branch="false" />
            <line number="34" hits="29" branch="false" />
            <line number="38" hits="1" branch="false" />
            <line number="39" hits="1" branch="false" />
            <line number="40" hits="1" branch="false" />
            <line number="41" hits="1" branch="false" />
            <line number="42" hits="1" branch="false" />
            <line number="43" hits="0" branch="false" />
            <line number="47" hits="1" branch="false" />
            <line number="48" hits="1" branch="false" />
            <line number="49" hits="1" branch="false" />
            <line number="50" hits="0" branch="false" />
            <line number="54" hits="1" branch="false" />
            <line number="55" hits="1" branch="false" />
            <line number="56" hits="1" branch="false" />
            <line number="57" hits="1" branch="false" />
            <line number="58" hits="1" branch="false" />
            <line number="59" hits="0" branch="false" />
            <line number="63" hits="1" branch="false" />
            <line number="64" hits="1" branch="false" />
            <line number="65" hits="1" branch="false" />
            <line number="66" hits="1" branch="false" />
            <line number="67" hits="0" branch="false" />
            <line number="71" hits="1" branch="false" />
            <line number="72" hits="1" branch="false" />
            <line number="73" hits="1" branch="false" />
            <line number="74" hits="1" branch="false" />
            <line number="75" hits="0" branch="false" />
            <line number="79" hits="1" branch="false" />
            <line number="80" hits="1" branch="false" />
            <line number="81" hits="1" branch="false" />
            <line number="82" hits="1" branch="false" />
            <line number="83" hits="1" branch="false" />
            <line number="84" hits="0" branch="false" />
            <line number="88" hits="1" branch="false" />
            <line number="89" hits="1" branch="false" />
            <line number="90" hits="1" branch="false" />
            <line number="91" hits="0" branch="false" />
            <line number="95" hits="1" branch="false" />
            <line number="96" hits="1" branch="false" />
            <line number="97" hits="1" branch="false" />
            <line number="98" hits="1" branch="false" />
            <line number="99" hits="0" branch="false" />
            <line number="103" hits="1" branch="false" />
            <line number="104" hits="1" branch="false" />
            <line number="105" hits="1" branch="false" />
            <line number="106" hits="1" branch="false" />
            <line number="107" hits="0" branch="false" />
            <line number="111" hits="1" branch="false" />
            <line number="112" hits="1" branch="false" />
            <line number="113" hits="1" branch="false" />
            <line number="114" hits="1" branch="false" />
            <line number="115" hits="0" branch="false" />
            <line number="119" hits="1" branch="false" />
            <line number="120" hits="1" branch="false" />
            <line number="121" hits="1" branch="false" />
            <line number="122" hits="1" branch="false" />
            <line number="123" hits="1" branch="false" />
            <line number="124" hits="0" branch="false" />
            <line number="128" hits="1" branch="false" />
            <line number="129" hits="1" branch="false" />
            <line number="130" hits="1" branch="false" />
            <line number="131" hits="0" branch="false" />
            <line number="135" hits="1" branch="false" />
            <line number="136" hits="1" branch="false" />
            <line number="137" hits="1" branch="false" />
            <line number="138" hits="1" branch="false" />
            <line number="139" hits="0" branch="false" />
            <line number="143" hits="1" branch="false" />
            <line number="144" hits="1" branch="false" />
            <line number="145" hits="1" branch="false" />
            <line number="146" hits="1" branch="false" />
            <line number="147" hits="1" branch="false" />
            <line number="148" hits="1" branch="false" />
            <line number="149" hits="1" branch="false" />
            <line number="150" hits="0" branch="false" />
            <line number="154" hits="1" branch="false" />
            <line number="155" hits="1" branch="false" />
            <line number="156" hits="1" branch="false" />
            <line number="157" hits="1" branch="false" />
            <line number="158" hits="1" branch="false" />
            <line number="159" hits="0" branch="false" />
            <line number="163" hits="1" branch="false" />
            <line number="164" hits="1" branch="false" />
            <line number="165" hits="1" branch="false" />
            <line number="166" hits="1" branch="false" />
            <line number="167" hits="1" branch="false" />
            <line number="168" hits="1" branch="false" />
            <line number="169" hits="1" branch="false" />
            <line number="170" hits="0" branch="false" />
            <line number="174" hits="1" branch="false" />
            <line number="175" hits="1" branch="false" />
            <line number="176" hits="1" branch="false" />
            <line number="177" hits="1" branch="false" />
            <line number="178" hits="1" branch="false" />
            <line number="179" hits="0" branch="false" />
            <line number="183" hits="1" branch="false" />
            <line number="184" hits="1" branch="false" />
            <line number="185" hits="1" branch="false" />
            <line number="186" hits="1" branch="false" />
            <line number="187" hits="1" branch="false" />
            <line number="188" hits="1" branch="false" />
            <line number="189" hits="0" branch="false" />
            <line number="192" hits="1" branch="false" />
            <line number="193" hits="1" branch="false" />
            <line number="194" hits="1" branch="false" />
            <line number="195" hits="1" branch="false" />
            <line number="196" hits="1" branch="false" />
            <line number="197" hits="1" branch="false" />
            <line number="198" hits="1" branch="false" />
            <line number="201" hits="1" branch="false" />
            <line number="202" hits="1" branch="false" />
            <line number="203" hits="1" branch="false" />
            <line number="204" hits="1" branch="false" />
            <line number="205" hits="1" branch="false" />
            <line number="206" hits="1" branch="false" />
            <line number="207" hits="1" branch="false" />
            <line number="210" hits="1" branch="false" />
            <line number="211" hits="1" branch="false" />
            <line number="212" hits="1" branch="false" />
            <line number="213" hits="1" branch="false" />
            <line number="214" hits="1" branch="false" />
            <line number="215" hits="1" branch="false" />
            <line number="216" hits="1" branch="false" />
            <line number="217" hits="1" branch="false" />
            <line number="218" hits="1" branch="false" />
            <line number="221" hits="1" branch="false" />
            <line number="222" hits="1" branch="false" />
            <line number="223" hits="1" branch="false" />
            <line number="224" hits="1" branch="false" />
            <line number="225" hits="1" branch="false" />
            <line number="226" hits="1" branch="false" />
            <line number="227" hits="1" branch="false" />
            <line number="228" hits="1" branch="false" />
            <line number="229" hits="1" branch="false" />
            <line number="232" hits="1" branch="false" />
            <line number="233" hits="1" branch="false" />
            <line number="234" hits="1" branch="false" />
            <line number="235" hits="1" branch="false" />
            <line number="236" hits="1" branch="false" />
            <line number="237" hits="1" branch="false" />
            <line number="240" hits="1" branch="false" />
            <line number="241" hits="1" branch="false" />
            <line number="242" hits="1" branch="false" />
            <line number="243" hits="1" branch="false" />
            <line number="244" hits="1" branch="false" />
            <line number="245" hits="1" branch="false" />
            <line number="246" hits="1" branch="false" />
            <line number="249" hits="1" branch="false" />
            <line number="250" hits="1" branch="false" />
            <line number="251" hits="1" branch="false" />
            <line number="252" hits="1" branch="false" />
            <line number="253" hits="1" branch="false" />
            <line number="254" hits="1" branch="false" />
            <line number="255" hits="1" branch="false" />
            <line number="256" hits="1" branch="false" />
            <line number="260" hits="1" branch="false" />
            <line number="261" hits="1" branch="false" />
            <line number="262" hits="1" branch="false" />
            <line number="263" hits="1" branch="false" />
            <line number="264" hits="1" branch="false" />
            <line number="265" hits="1" branch="false" />
            <line number="266" hits="1" branch="false" />
            <line number="267" hits="1" branch="false" />
            <line number="268" hits="1" branch="false" />
            <line number="269" hits="0" branch="false" />
            <line number="272" hits="1" branch="false" />
            <line number="273" hits="1" branch="false" />
            <line number="274" hits="1" branch="false" />
            <line number="275" hits="1" branch="false" />
            <line number="276" hits="1" branch="false" />
            <line number="277" hits="1" branch="false" />
            <line number="280" hits="1" branch="false" />
            <line number="281" hits="1" branch="false" />
            <line number="282" hits="1" branch="false" />
            <line number="283" hits="1" branch="false" />
            <line number="284" hits="1" branch="false" />
            <line number="285" hits="1" branch="false" />
            <line number="288" hits="1" branch="false" />
            <line number="289" hits="1" branch="false" />
            <line number="290" hits="1" branch="false" />
            <line number="291" hits="1" branch="false" />
            <line number="292" hits="1" branch="false" />
            <line number="293" hits="1" branch="false" />
            <line number="294" hits="1" branch="false" />
            <line number="295" hits="1" branch="false" />
          </lines>
        </class>
      </classes>
    </package>
    <package name="Moq" line-rate="0.150592609807111" branch-rate="0.09521484375" complexity="1937">
      <classes>
        <class name="Moq.ActionObserver" filename="C:\projects\moq4\src\Moq\ActionObserver.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReconstructExpression" signature="(System.Action`1&lt;T&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateProxy" signature="(System.Type,System.Object[],Moq.MatcherObserver,Moq.ActionObserver/Recorder&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invocation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Next" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MatcherObserver)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Intercept" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.AsInterface`1" filename="C:\projects\moq4\src\Moq\AsInterface.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="AdditionalInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfiguredDefaultValues" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConstructorArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MutableInvocations" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsObjectInitialized" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MockedType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Behavior" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="(Moq.DefaultValueProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventHandlers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InheritedInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Object" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MutableSetups" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="(Moq.Switches)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="As" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnGetObject" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.Awaitable" filename="C:\projects\moq4\src\Moq\Async\Awaitable.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="TryGetResultRecursive" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.AwaitableFactory" filename="C:\projects\moq4\src\Moq\Async\AwaitableFactory.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Create" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGet" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.AwaitableFactory`1" filename="C:\projects\moq4\src\Moq\Async\AwaitableFactory`1.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Async.IAwaitableFactory.get_ResultType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateCompleted" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateResultExpression" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.TryGetResult" signature="(System.Object,System.Object&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.AwaitableFactory`2" filename="C:\projects\moq4\src\Moq\Async\AwaitableFactory`2.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ResultType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateCompleted" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Async.IAwaitableFactory.TryGetResult" signature="(System.Object,System.Object&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.AwaitExpression" filename="C:\projects\moq4\src\Moq\Async\AwaitExpression.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="CanReduce" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NodeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Operand" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Async.IAwaitableFactory)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="VisitChildren" signature="(System.Linq.Expressions.ExpressionVisitor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.TaskFactory" filename="C:\projects\moq4\src\Moq\Async\TaskFactory.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateCompleted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.TaskFactory`1" filename="C:\projects\moq4\src\Moq\Async\TaskFactory`1.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateCompleted" signature="(TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateResultExpression" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetResult" signature="(System.Threading.Tasks.Task`1&lt;TResult&gt;,TResult&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.ValueTaskFactory" filename="C:\projects\moq4\src\Moq\Async\ValueTaskFactory.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateCompleted" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Async.ValueTaskFactory`1" filename="C:\projects\moq4\src\Moq\Async\ValueTaskFactory`1.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateCompleted" signature="(TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFaulted" signature="(System.Collections.Generic.IEnumerable`1&lt;System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateResultExpression" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetResult" signature="(System.Threading.Tasks.ValueTask`1&lt;TResult&gt;,TResult&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behavior" filename="C:\projects\moq4\src\Moq\Behavior.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.Callback" filename="C:\projects\moq4\src\Moq\Behaviors\Callback.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Action`1&lt;Moq.IInvocation&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.LimitInvocationCount" filename="C:\projects\moq4\src\Moq\Behaviors\LimitInvocationCount.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Moq.MethodCall,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.NoOp" filename="C:\projects\moq4\src\Moq\Behaviors\NoOp.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.RaiseEvent" filename="C:\projects\moq4\src\Moq\Behaviors\RaiseEvent.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Delegate,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ReturnBase" filename="C:\projects\moq4\src\Moq\Behaviors\ReturnBase.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ReturnBaseOrDefaultValue" filename="C:\projects\moq4\src\Moq\Behaviors\ReturnBaseOrDefaultValue.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ReturnComputedValue" filename="C:\projects\moq4\src\Moq\Behaviors\ReturnComputedValue.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Func`2&lt;Moq.IInvocation,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ReturnValue" filename="C:\projects\moq4\src\Moq\Behaviors\ReturnValue.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Value" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ThrowComputedException" filename="C:\projects\moq4\src\Moq\Behaviors\ThrowComputedException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Func`2&lt;Moq.IInvocation,System.Exception&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Behaviors.ThrowException" filename="C:\projects\moq4\src\Moq\Behaviors\ThrowException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Capture" filename="C:\projects\moq4\src\Moq\Capture.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="In" signature="(System.Collections.Generic.ICollection`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="In" signature="(System.Collections.Generic.IList`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="With" signature="(Moq.CaptureMatch`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.CaptureMatch`1" filename="C:\projects\moq4\src\Moq\CaptureMatch.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Action`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="BuildCondition" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.CastleProxyFactory" filename="C:\projects\moq4\src\Moq\Interception\CastleProxyFactory.cs" line-rate="1" branch-rate="1" complexity="4">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateProxy" signature="(System.Type,Moq.IInterceptor,System.Type[],System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMethodVisible" signature="(System.Reflection.MethodInfo,System.String&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsTypeVisible" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.IInterceptor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Intercept" signature="(Castle.DynamicProxy.IInvocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(Castle.DynamicProxy.IInvocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="DetachFromUnderlying" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ShouldInterceptMethod" signature="(System.Type,System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRelevantObjectMethod" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Condition" filename="C:\projects\moq4\src\Moq\Condition.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="IsTrue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`1&lt;System.Boolean&gt;,System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.DefaultExpressionCompiler" filename="C:\projects\moq4\src\Moq\DefaultExpressionCompiler.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Compile" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Compile" signature="(System.Linq.Expressions.Expression`1&lt;TDelegate&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.DefaultValueProvider" filename="C:\projects\moq4\src\Moq\DefaultValueProvider.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mock" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Kind" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetDefaultParameterValue" signature="(System.Reflection.ParameterInfo,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultReturnValue" signature="(System.Reflection.MethodInfo,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.EmptyDefaultValueProvider" filename="C:\projects\moq4\src\Moq\EmptyDefaultValueProvider.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Kind" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CreateArray" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateEnumerable" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateEnumerableOf" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQueryable" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQueryableOf" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Evaluator" filename="C:\projects\moq4\src\Moq\Evaluator.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="PartialEval" signature="(System.Linq.Expressions.Expression,System.Func`2&lt;System.Linq.Expressions.Expression,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PartialEval" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.HashSet`1&lt;System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Eval" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Evaluate" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Func`2&lt;System.Linq.Expressions.Expression,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Nominate" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.EventHandlerCollection" filename="C:\projects\moq4\src\Moq\EventHandlerCollection.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Add" signature="(System.Reflection.EventInfo,System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Remove" signature="(System.Reflection.EventInfo,System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGet" signature="(System.Reflection.EventInfo,System.Delegate&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGet" signature="(System.Reflection.EventInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Expectation" filename="C:\projects\moq4\src\Moq\Expectation.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="HasResultExpression" signature="(Moq.Async.IAwaitableFactory&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ExpressionComparer" filename="C:\projects\moq4\src\Moq\ExpressionComparer.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equals" signature="(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt;,System.Collections.ObjectModel.ReadOnlyCollection`1&lt;T&gt;,System.Func`3&lt;T,T,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsBinary" signature="(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.BinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsConditional" signature="(System.Linq.Expressions.ConditionalExpression,System.Linq.Expressions.ConditionalExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsConstant" signature="(System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsElementInit" signature="(System.Linq.Expressions.ElementInit,System.Linq.Expressions.ElementInit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsIndex" signature="(System.Linq.Expressions.IndexExpression,System.Linq.Expressions.IndexExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsInvocation" signature="(System.Linq.Expressions.InvocationExpression,System.Linq.Expressions.InvocationExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsLambda" signature="(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsListInit" signature="(System.Linq.Expressions.ListInitExpression,System.Linq.Expressions.ListInitExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMemberAssignment" signature="(System.Linq.Expressions.MemberAssignment,System.Linq.Expressions.MemberAssignment)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMemberBinding" signature="(System.Linq.Expressions.MemberBinding,System.Linq.Expressions.MemberBinding)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMember" signature="(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMemberInit" signature="(System.Linq.Expressions.MemberInitExpression,System.Linq.Expressions.MemberInitExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMemberListBinding" signature="(System.Linq.Expressions.MemberListBinding,System.Linq.Expressions.MemberListBinding)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMemberMemberBinding" signature="(System.Linq.Expressions.MemberMemberBinding,System.Linq.Expressions.MemberMemberBinding)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsMethodCall" signature="(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsNewArray" signature="(System.Linq.Expressions.NewArrayExpression,System.Linq.Expressions.NewArrayExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsNew" signature="(System.Linq.Expressions.NewExpression,System.Linq.Expressions.NewExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsParameter" signature="(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsTypeBinary" signature="(System.Linq.Expressions.TypeBinaryExpression,System.Linq.Expressions.TypeBinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsUnary" signature="(System.Linq.Expressions.UnaryExpression,System.Linq.Expressions.UnaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EqualsExtension" signature="(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ExpressionCompiler" filename="C:\projects\moq4\src\Moq\ExpressionCompiler.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Default" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Instance" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Instance" signature="(Moq.ExpressionCompiler)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ExpressionExtensions" filename="C:\projects\moq4\src\Moq\ExpressionExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ConvertIfNeeded" signature="(System.Linq.Expressions.Expression,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileUsingExpressionCompiler" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompileUsingExpressionCompiler" signature="(System.Linq.Expressions.Expression`1&lt;TDelegate&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMatch" signature="(System.Linq.Expressions.Expression,Moq.Match&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanSplit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Split" signature="(System.Linq.Expressions.LambdaExpression,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetReboundProperty" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToPropertyInfo" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsProperty" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsPropertyIndexer" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AssignItIsAny" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TMock,T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PartialEval" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PartialMatcherAwareEval" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PartialMatcherAwareEval_ShouldEvaluate" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToStringFixed" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ExpressionExtensions" filename="C:\projects\moq4\src\Moq\Expressions\Visitors\Apply.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Apply" signature="(System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionVisitor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ExpressionReconstructor" filename="C:\projects\moq4\src\Moq\ExpressionReconstructor.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Instance" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Instance" signature="(Moq.ExpressionReconstructor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Expressions.Visitors.ConstructorCallVisitor" filename="C:\projects\moq4\src\Moq\Expressions\Visitors\ConstructorCallVisitor.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ExtractArgumentValues" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Visit" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitNew" signature="(System.Linq.Expressions.NewExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Expressions.Visitors.EvaluateCaptures" filename="C:\projects\moq4\src\Moq\Expressions\Visitors\EvaluateCaptures.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="VisitMember" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitUnary" signature="(System.Linq.Expressions.UnaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Expressions.Visitors.UpgradePropertyAccessorMethods" filename="C:\projects\moq4\src\Moq\Expressions\Visitors\UpgradePropertyAccessorMethods.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="VisitMethodCall" signature="(System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Extensions" filename="C:\projects\moq4\src\Moq\Extensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanCreateInstance" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanRead" signature="(System.Reflection.PropertyInfo,System.Reflection.MethodInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanRead" signature="(System.Reflection.PropertyInfo,System.Reflection.MethodInfo&amp;,System.Reflection.PropertyInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanWrite" signature="(System.Reflection.PropertyInfo,System.Reflection.MethodInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanWrite" signature="(System.Reflection.PropertyInfo,System.Reflection.MethodInfo&amp;,System.Reflection.PropertyInfo&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultValue" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetImplementingMethod" signature="(System.Reflection.MethodInfo,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InvokePreserveStack" signature="(System.Delegate,System.Collections.Generic.IReadOnlyList`1&lt;System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsExtensionMethod" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGetAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSetAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIndexerAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsPropertyAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEventAddAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEventRemoveAccessor" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsDelegateType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMockable" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsTypeMatcher" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsTypeMatcher" signature="(System.Type,System.Type&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOrContainsTypeMatcher" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ImplementsTypeMatcherProtocol" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanOverride" signature="(System.Reflection.MethodBase)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanOverrideGet" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanOverrideSet" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethods" signature="(System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareTo" signature="(TTypes,TOtherTypes,System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParameterTypeList" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetParameterTypes" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CompareParameterTypesTo" signature="(System.Delegate,TOtherTypes)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetInvokeMethodFromUntypedDelegateCallback" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SubstituteTypeMatchers" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindAllInnerMocks" signature="(Moq.SetupCollection)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindLastInnerMock" signature="(Moq.SetupCollection,System.Func`2&lt;Moq.Setup,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.FailForStrictMock" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.FindAndExecuteMatchingSetup" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.GeneratedReturnsExtensions" filename="C:\projects\moq4\src\Moq\ReturnsExtensions.Generated.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`3&lt;T1,T2,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`4&lt;T1,T2,T3,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`5&lt;T1,T2,T3,T4,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`6&lt;T1,T2,T3,T4,T5,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`7&lt;T1,T2,T3,T4,T5,T6,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`2&lt;T,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`3&lt;T1,T2,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`4&lt;T1,T2,T3,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`5&lt;T1,T2,T3,T4,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`6&lt;T1,T2,T3,T4,T5,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`7&lt;T1,T2,T3,T4,T5,T6,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Guard" filename="C:\projects\moq4\src\Moq\Guard.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CanCreateInstance" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ImplementsInterface" signature="(System.Type,System.Type,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ImplementsTypeMatcherProtocol" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAssignmentToPropertyOrIndexer" signature="(System.Linq.Expressions.LambdaExpression,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOverridable" signature="(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsVisibleToProxyFactory" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEventAdd" signature="(System.Linq.Expressions.LambdaExpression,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsEventRemove" signature="(System.Linq.Expressions.LambdaExpression,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotNull" signature="(System.Object,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotNullOrEmpty" signature="(System.String,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NotField" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMockable" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Positive" signature="(System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanRead" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanWrite" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.HandleEventSubscription" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.HandleWellKnownMethods" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleEquals" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleGetHashCode" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleToString" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HandleMockGetter" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsObjectMethodWithoutSetup" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ImmutablePopOnlyStack`1" filename="C:\projects\moq4\src\Moq\ImmutablePopOnlyStack.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Empty" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Collections.Generic.IEnumerable`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(T[],System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pop" signature="(Moq.ImmutablePopOnlyStack`1&lt;T&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.InnerMockSetup" filename="C:\projects\moq4\src\Moq\InnerMockSetup.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.MethodExpectation,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecuteCore" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResetCore" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="VerifySelf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="get_InnerMocks" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Internals.InterfaceProxy" filename="C:\projects\moq4\src\Moq\Interception\InterfaceProxy.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Reflection.MethodInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Invocation" filename="C:\projects\moq4\src\Moq\Invocation.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="Method" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MethodImplementation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Arguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IInvocation.get_Arguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchingSetup" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ProxyType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnValue" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exception" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exception" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsVerified" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Reflection.MethodInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertResultToAwaitable" signature="(Moq.Async.IAwaitableFactory)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MarkAsMatchedBy" signature="(Moq.Setup)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MarkAsVerified" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="MarkAsVerifiedIfMatchedBy" signature="(System.Func`2&lt;Moq.Setup,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="Exception" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.InvocationAction" filename="C:\projects\moq4\src\Moq\InvocationAction.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Action`1&lt;Moq.IInvocation&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.InvocationCollection" filename="C:\projects\moq4\src\Moq\InvocationCollection.cs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Add" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="ToArray" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ToArray" signature="(System.Func`2&lt;Moq.Invocation,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.InvocationFunc" filename="C:\projects\moq4\src\Moq\InvocationFunc.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Func`2&lt;Moq.IInvocation,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.It" filename="C:\projects\moq4\src\Moq\It.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name="IsAny" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="IsAny" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNotNull" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="Is" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TValue,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Is" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`3&lt;System.Object,System.Type,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Is" signature="(TValue,System.Collections.Generic.IEqualityComparer`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInRange" signature="(TValue,TValue,Moq.Range)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIn" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIn" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.Collections.Generic.IEqualityComparer`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsIn" signature="(TValue[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNotIn" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNotIn" signature="(System.Collections.Generic.IEnumerable`1&lt;TValue&gt;,System.Collections.Generic.IEqualityComparer`1&lt;TValue&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNotIn" signature="(TValue[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRegex" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRegex" signature="(System.String,System.Text.RegularExpressions.RegexOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Moq.ITypeMatcher.Matches" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.ITypeMatcher.Matches" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.ITypeMatcher.Matches" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.NonVoidSetupPhrase`2" filename="C:\projects\moq4\src\Moq\Language\Flow\NonVoidSetupPhrase.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Moq.MethodCall)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(Moq.InvocationAction)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.Language.ICallbackGetter&lt;T,TResult&gt;.Callback" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`1&lt;T1&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`3&lt;T1,T2,T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`4&lt;T1,T2,T3,T4&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`5&lt;T1,T2,T3,T4,T5&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`6&lt;T1,T2,T3,T4,T5,T6&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`7&lt;T1,T2,T3,T4,T5,T6,T7&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`8&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.EventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`2&lt;T1,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`3&lt;T1,T2,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`4&lt;T1,T2,T3,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`5&lt;T1,T2,T3,T4,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`6&lt;T1,T2,T3,T4,T5,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`7&lt;T1,T2,T3,T4,T5,T6,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`17&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(Moq.InvocationFunc)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`2&lt;T1,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`3&lt;T1,T2,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`4&lt;T1,T2,T3,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`5&lt;T1,T2,T3,T4,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`6&lt;T1,T2,T3,T4,T5,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`7&lt;T1,T2,T3,T4,T5,T6,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`17&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.SetterSetupPhrase`2" filename="C:\projects\moq4\src\Moq\Language\Flow\SetterSetupPhrase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.MethodCall)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`1&lt;TProperty&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.SetupPhrase" filename="C:\projects\moq4\src\Moq\Language\Flow\SetupPhrase.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Setup" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MethodCall)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AtMost" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AtMostOnce" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Callback" signature="(Moq.InvocationAction)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`3&lt;T1,T2,T3&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`4&lt;T1,T2,T3,T4&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`5&lt;T1,T2,T3,T4,T5&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`6&lt;T1,T2,T3,T4,T5,T6&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`7&lt;T1,T2,T3,T4,T5,T6,T7&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`8&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Callback" signature="(System.Action`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Throws" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Throws" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`1&lt;TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`2&lt;T,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`3&lt;T1,T2,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`4&lt;T1,T2,T3,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`5&lt;T1,T2,T3,T4,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`6&lt;T1,T2,T3,T4,T5,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`7&lt;T1,T2,T3,T4,T5,T6,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`17&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verifiable" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Verifiable" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.SetupSequencePhrase" filename="C:\projects\moq4\src\Moq\Language\Flow\SetupSequencePhrase.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(Moq.SequenceSetup)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Pass" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Throws" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Throws" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`1&lt;TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.SetupSequencePhrase`1" filename="C:\projects\moq4\src\Moq\Language\Flow\SetupSequencePhrase.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name=".ctor" signature="(Moq.SequenceSetup)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Returns" signature="(TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Returns" signature="(System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Throws" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Throws" signature="(System.Func`1&lt;TException&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.VoidSetupPhrase`1" filename="C:\projects\moq4\src\Moq\Language\Flow\VoidSetupPhrase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.MethodCall)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.EventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`2&lt;T1,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`3&lt;T1,T2,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`4&lt;T1,T2,T3,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`5&lt;T1,T2,T3,T4,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`6&lt;T1,T2,T3,T4,T5,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`7&lt;T1,T2,T3,T4,T5,T6,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`8&lt;T1,T2,T3,T4,T5,T6,T7,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`9&lt;T1,T2,T3,T4,T5,T6,T7,T8,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`10&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`11&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`12&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`13&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`14&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`15&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`16&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raises" signature="(System.Action`1&lt;T&gt;,System.Func`17&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,System.EventArgs&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Language.Flow.WhenPhrase`1" filename="C:\projects\moq4\src\Moq\Language\Flow\WhenPhrase.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.Mock`1&lt;T&gt;,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Linq.MockQueryable`1" filename="C:\projects\moq4\src\Moq\Linq\MockQuery.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="ElementType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Provider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQuery" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQuery" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Linq.MockSetupsBuilder" filename="C:\projects\moq4\src\Moq\Linq\MockSetupsBuilder.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="VisitBinary" signature="(System.Linq.Expressions.BinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitMember" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitMethodCall" signature="(System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitUnary" signature="(System.Linq.Expressions.UnaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertToSetup" signature="(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConvertToSetupReturns" signature="(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="MockObject" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MockObjectParameter" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitMember" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitParameter" signature="(System.Linq.Expressions.ParameterExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitUnary" signature="(System.Linq.Expressions.UnaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.LookupOrFallbackDefaultValueProvider" filename="C:\projects\moq4\src\Moq\LookupOrFallbackDefaultValueProvider.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Deregister" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Register" signature="(System.Type,System.Func`3&lt;System.Type,Moq.Mock,System.Object&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultParameterValue" signature="(System.Reflection.ParameterInfo,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultReturnValue" signature="(System.Reflection.MethodInfo,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultValue" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFallbackDefaultValue" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateValueTupleOf" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Match" filename="C:\projects\moq4\src\Moq\Match.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="RenderExpression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RenderExpression" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matcher" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Moq.IMatcher.Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Moq.IMatcher.SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Predicate`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Predicate`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Func`3&lt;System.Object,System.Type,System.Boolean&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Register" signature="(Moq.Match)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Match`1" filename="C:\projects\moq4\src\Moq\Match.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Condition" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Condition" signature="(System.Predicate`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Success" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Success" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Predicate`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;T&gt;&gt;,System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanCast" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Match`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MatcherFactory" filename="C:\projects\moq4\src\Moq\MatcherFactory.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="CreateMatchers" signature="(System.Collections.Generic.IReadOnlyList`1&lt;System.Linq.Expressions.Expression&gt;,System.Reflection.ParameterInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMatcher" signature="(System.Linq.Expressions.Expression,System.Reflection.ParameterInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMatcher" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MatcherObserver" filename="C:\projects\moq4\src\Moq\MatcherObserver.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Activate" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="IsActive" signature="(Moq.MatcherObserver&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Dispose" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetNextTimestamp" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnMatch" signature="(Moq.Match)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetLastMatch" signature="(Moq.Match&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchesBetween" signature="(System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Int32,Moq.Match)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.AnyMatcher" filename="C:\projects\moq4\src\Moq\Matchers\AnyMatcher.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Instance" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.ConstantMatcher" filename="C:\projects\moq4\src\Moq\Matchers\ConstantMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MatchesEnumerable" signature="(System.Collections.IEnumerable)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.ExpressionMatcher" filename="C:\projects\moq4\src\Moq\Matchers\ExpressionMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.LazyEvalMatcher" filename="C:\projects\moq4\src\Moq\Matchers\LazyEvalMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.MatcherAttributeMatcher" filename="C:\projects\moq4\src\Moq\Matchers\MatcherAttributeMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResolveValidatorMethod" signature="(System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.ParamArrayMatcher" filename="C:\projects\moq4\src\Moq\Matchers\ParamArrayMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.IMatcher[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Matchers.RefMatcher" filename="C:\projects\moq4\src\Moq\Matchers\RefMatcher.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MatchExpression" filename="C:\projects\moq4\src\Moq\MatchExpression.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="NodeType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanReduce" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.Match)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitChildren" signature="(System.Linq.Expressions.ExpressionVisitor)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MatchFactory" filename="C:\projects\moq4\src\Moq\Match.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(System.Func`3&lt;System.Object,System.Type,System.Boolean&gt;,System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(System.Object,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CanCast" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MethodCall" filename="C:\projects\moq4\src\Moq\MethodCall.cs" line-rate="1" branch-rate="1" complexity="19">
          <methods>
            <method name="FailMessage" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Condition" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.Condition,Moq.MethodExpectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetUserCodeCallSite" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="ExecuteCore" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetCallBaseBehavior" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="SetCallbackBehavior" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetFailMessage" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetRaiseEventBehavior" signature="(System.Action`1&lt;TMock&gt;,System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetRaiseEventBehavior" signature="(System.Action`1&lt;TMock&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetReturnValueBehavior" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetReturnComputedValueBehavior" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetThrowExceptionBehavior" signature="(System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetThrowComputedExceptionBehavior" signature="(System.Delegate)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ResetCore" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="AtMost" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="ValidateNumberOfCallbackParameters" signature="(System.Delegate,System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ValidateCallbackReturnType" signature="(System.Reflection.MethodInfo,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get_InnerMocks" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MethodExpectation" filename="C:\projects\moq4\src\Moq\MethodExpectation.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateFrom" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.LambdaExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList`1&lt;System.Linq.Expressions.Expression&gt;,System.Boolean,System.Boolean,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddResultExpression" signature="(System.Func`2&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;,Moq.Async.IAwaitableFactory)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="HasResultExpression" signature="(Moq.Async.IAwaitableFactory&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deconstruct" signature="(System.Linq.Expressions.LambdaExpression&amp;,System.Reflection.MethodInfo&amp;,System.Collections.Generic.IReadOnlyList`1&lt;System.Linq.Expressions.Expression&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMatch" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupEvaluatedSuccessfully" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOverride" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Expectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PartiallyEvaluateArguments" signature="(System.Collections.Generic.IReadOnlyList`1&lt;System.Linq.Expressions.Expression&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MethodSetup" filename="C:\projects\moq4\src\Moq\MethodSetup.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Method" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.MethodExpectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mock" filename="C:\projects\moq4\src\Moq\Interception\Mock.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Moq.IInterceptor.Intercept" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mock" filename="C:\projects\moq4\src\Moq\Linq\Mock.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Of" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Of" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mock" filename="C:\projects\moq4\src\Moq\Mock.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="DefaultValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValue" signature="(Moq.DefaultValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Object" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Invocations" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setups" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Get" signature="(T)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(Moq.Mock[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAll" signature="(Moq.Mock[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="VerifyAll" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Verify" signature="(System.Func`2&lt;Moq.ISetup,System.Boolean&gt;,System.Collections.Generic.HashSet`1&lt;Moq.Mock&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyNoOtherCalls" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyNoOtherCalls" signature="(Moq.Mock,System.Collections.Generic.HashSet`1&lt;Moq.Mock&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingInvocationCount" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.List`1&lt;Moq.Pair`2&lt;Moq.Invocation,Moq.MethodExpectation&gt;&gt;&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMatchingInvocationCount" signature="(Moq.Mock,Moq.ImmutablePopOnlyStack`1&lt;Moq.MethodExpectation&gt;&amp;,System.Collections.Generic.HashSet`1&lt;Moq.Mock&gt;,System.Collections.Generic.List`1&lt;Moq.Pair`2&lt;Moq.Invocation,Moq.MethodExpectation&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupGet" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupReturns" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupAdd" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupRemove" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,Moq.Condition)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupProperty" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupRecursive" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Func`4&lt;Moq.Mock,System.Linq.Expressions.Expression,Moq.MethodExpectation,TSetup&gt;,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupRecursive" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.Stack`1&lt;Moq.MethodExpectation&gt;,System.Func`4&lt;Moq.Mock,System.Linq.Expressions.Expression,Moq.MethodExpectation,TSetup&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupAllProperties" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RaiseEvent" signature="(Moq.Mock,System.Action`1&lt;T&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="RaiseEvent" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.Stack`1&lt;Moq.MethodExpectation&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ImplementsInterface" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetReturnsDefault" signature="(TReturn)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDefaultValue" signature="(System.Reflection.MethodInfo,Moq.Mock&amp;,Moq.DefaultValueProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mock`1" filename="C:\projects\moq4\src\Moq\Mock`1.cs" line-rate="1" branch-rate="1" complexity="19">
          <methods>
            <method name="Behavior" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConstructorArguments" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ConfiguredDefaultValues" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="(Moq.DefaultValueProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="EventHandlers" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AdditionalInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MutableInvocations" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsObjectInitialized" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Object" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Name" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MockedType" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MutableSetups" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InheritedInterfaces" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="(Moq.Switches)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MockBehavior,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;T&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateUniqueDefaultMockName" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="CheckParameters" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="InitializeInstance" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OnGetObject" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="As" signature="()" line-rate="1" branch-rate="1" complexity="6">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupAdd" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupRemove" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupProperty" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupProperty" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,TProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupAllProperties" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="When" signature="(System.Func`1&lt;System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;,System.Func`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,System.Func`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAdd" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyRemove" signature="(System.Action`1&lt;T&gt;,System.Func`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyNoOtherCalls" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Raise" signature="(System.Action`1&lt;T&gt;,System.EventArgs)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Raise" signature="(System.Action`1&lt;T&gt;,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mock`1" filename="C:\projects\moq4\src\Moq\Obsolete\Mock.Generic.Legacy.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Expect" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;T&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expect" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectSet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExpectSet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,TProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockDefaultValueProvider" filename="C:\projects\moq4\src\Moq\MockDefaultValueProvider.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Kind" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetFallbackDefaultValue" signature="(System.Type,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockException" filename="C:\projects\moq4\src\Moq\MockException.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Reasons" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsVerificationError" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MoreThanOneCall" signature="(Moq.MethodCall,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MoreThanNCalls" signature="(Moq.MethodCall,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoMatchingCalls" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.String,Moq.Times,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="NoSetup" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnValueRequired" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnmatchedSetup" signature="(Moq.Setup)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FromInnerMockOf" signature="(Moq.ISetup,Moq.MockException)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Combined" signature="(System.Collections.Generic.IEnumerable`1&lt;Moq.MockException&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="UnverifiedInvocations" signature="(Moq.Mock,System.Collections.Generic.IEnumerable`1&lt;Moq.Invocation&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MockExceptionReasons,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetObjectData" signature="(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockExtensions" filename="C:\projects\moq4\src\Moq\MockExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Reset" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockExtensions" filename="C:\projects\moq4\src\Moq\Obsolete\MockExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ResetCalls" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockFactory" filename="C:\projects\moq4\src\Moq\Obsolete\MockFactory.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="Behavior" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CallBase" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValue" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValue" signature="(Moq.DefaultValue)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DefaultValueProvider" signature="(Moq.DefaultValueProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mocks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Switches" signature="(Moq.Switches)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Create" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(Moq.MockBehavior,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Create" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`1&lt;T&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMock" signature="(Moq.MockBehavior,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="VerifyAll" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="VerifyNoOtherCalls" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="VerifyMocks" signature="(System.Action`1&lt;Moq.Mock&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockLegacyExtensions" filename="C:\projects\moq4\src\Moq\Obsolete\Mock.Generic.Legacy.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SetupSet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,TProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,TProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,TProperty,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockRepository" filename="C:\projects\moq4\src\Moq\Linq\MockRepository.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="Of" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Of" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OneOf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OneOf" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OneOf" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OneOf" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMockQuery" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQueryable" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMocks" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockRepository" filename="C:\projects\moq4\src\Moq\MockRepository.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Mocks" filename="C:\projects\moq4\src\Moq\Linq\Mocks.cs" line-rate="1" branch-rate="1" complexity="6">
          <methods>
            <method name="Of" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Of" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Of" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;,Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OneOf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="OneOf" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMockQuery" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateQueryable" signature="(Moq.MockBehavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="CreateMocks" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockSequence" filename="C:\projects\moq4\src\Moq\MockSequence.cs" line-rate="1" branch-rate="1" complexity="3">
          <methods>
            <method name="Cyclic" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Cyclic" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="NextStep" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="For" signature="(Moq.Mock`1&lt;TMock&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.MockSequenceHelper" filename="C:\projects\moq4\src\Moq\MockSequence.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="InSequence" signature="(Moq.Mock`1&lt;TMock&gt;,Moq.MockSequence)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ObsoleteMockExtensions" filename="C:\projects\moq4\src\Moq\Obsolete\ObsoleteMockExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SetupSet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(Moq.Mock`1&lt;T&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;T,TProperty&gt;&gt;,Moq.Times,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Pair`2" filename="C:\projects\moq4\src\Moq\Pair.cs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name=".ctor" signature="(T1,T2)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deconstruct" signature="(T1&amp;,T2&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Pair`2&lt;T1,T2&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="11">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ParameterTypes" filename="C:\projects\moq4\src\Moq\ParameterTypes.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name="Item" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Reflection.ParameterInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Protected.ItExpr" filename="C:\projects\moq4\src\Moq\Protected\ItExpr.cs" line-rate="1" branch-rate="1" complexity="2">
          <methods>
            <method name="IsNull" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsAny" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Is" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TValue,System.Boolean&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsInRange" signature="(TValue,TValue,Moq.Range)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRegex" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsRegex" signature="(System.String,System.Text.RegularExpressions.RegexOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsAny" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Protected.ProtectedAsMock`2" filename="C:\projects\moq4\src\Moq\Protected\ProtectedAsMock.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".ctor" signature="(Moq.Mock`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;TAnalog&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;TAnalog&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.Action`1&lt;TAnalog&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TProperty&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupProperty" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TProperty&gt;&gt;,TProperty)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;TAnalog&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;TAnalog&gt;&gt;,System.Nullable`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TResult&gt;&gt;,System.Nullable`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.Action`1&lt;TAnalog&gt;,System.Nullable`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TAnalog,TProperty&gt;&gt;,System.Nullable`1&lt;Moq.Times&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReconstructAndReplaceSetter" signature="(System.Action`1&lt;TAnalog&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReplaceDuck" signature="(System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitMethodCall" signature="(System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitIndex" signature="(System.Linq.Expressions.IndexExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VisitMember" signature="(System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindCorrespondingMember" signature="(System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindCorrespondingMethod" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindCorrespondingProperty" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCorrespondingMethod" signature="(System.Reflection.MethodInfo,System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsCorrespondingProperty" signature="(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Protected.ProtectedExtension" filename="C:\projects\moq4\src\Moq\Protected\ProtectedExtension.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Protected" signature="(Moq.Mock`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Protected.ProtectedMock`1" filename="C:\projects\moq4\src\Moq\Protected\ProtectedMock.cs" line-rate="1" branch-rate="1" complexity="5">
          <methods>
            <method name=".ctor" signature="(Moq.Mock`1&lt;T&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="As" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalSetup" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Setup" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalSetup" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupGet" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSet" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalSetupSequence" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalSetupSequence" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,Moq.Times,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,System.Type[],Moq.Times,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,System.Type[],Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalVerify" signature="(System.String,System.Type[],Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,Moq.Times,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,System.Type[],Moq.Times,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Verify" signature="(System.String,System.Type[],Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InternalVerify" signature="(System.String,System.Type[],Moq.Times,System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyGet" signature="(System.String,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySet" signature="(System.String,Moq.Times,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMemberAccess" signature="(System.Reflection.PropertyInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethod" signature="(System.String,System.Type[],System.Boolean,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodCall" signature="(System.Reflection.MethodInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetMethodCall" signature="(System.Reflection.MethodInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetProperty" signature="(System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetSetterExpression" signature="(System.Reflection.PropertyInfo,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfMemberMissing" signature="(System.String,System.Reflection.MemberInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfMethodMissing" signature="(System.String,System.Reflection.MethodInfo,System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfPublicMethod" signature="(System.Reflection.MethodInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfPublicGetter" signature="(System.Reflection.PropertyInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfPublicSetter" signature="(System.Reflection.PropertyInfo,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowIfVoidMethod" signature="(System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToArgTypes" signature="(System.Object[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsItRefAny" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ItRefAnyField" signature="(System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToExpressionArg" signature="(System.Type,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToExpressionArgs" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ProxyFactory" filename="C:\projects\moq4\src\Moq\Interception\ProxyFactory.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Instance" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.RecordInvocation" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Return" filename="C:\projects\moq4\src\Moq\Interception\InterceptionAspects.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Handle" signature="(Moq.Invocation,Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.ReturnsExtensions" filename="C:\projects\moq4\src\Moq\ReturnsExtensions.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan,System.TimeSpan,System.Random)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan,System.TimeSpan,System.Random)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan,System.TimeSpan,System.Random)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan,System.TimeSpan,System.Random)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsNullResult" signature="(System.Delegate,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDelay" signature="(System.TimeSpan,System.TimeSpan,System.Random)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelayedResult" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelayedResult" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelayedException" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="DelayedException" signature="(Moq.Language.IReturns`2&lt;TMock,System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception,System.TimeSpan)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.SequenceExtensions" filename="C:\projects\moq4\src\Moq\Obsolete\SequenceExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="SetupSequence" signature="(Moq.Mock`1&lt;TMock&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;TMock,TResult&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetupSequence" signature="(Moq.Mock`1&lt;TMock&gt;,System.Linq.Expressions.Expression`1&lt;System.Action`1&lt;TMock&gt;&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.SequenceExtensions" filename="C:\projects\moq4\src\Moq\SequenceExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="ReturnsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,TResult)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ReturnsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Func`1&lt;TResult&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PassAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.Task&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="PassAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.ValueTask&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.Task`1&lt;TResult&gt;&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.ValueTask`1&lt;TResult&gt;&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.Task&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ThrowsAsync" signature="(Moq.Language.ISetupSequentialResult`1&lt;System.Threading.Tasks.ValueTask&gt;,System.Exception)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.SequenceSetup" filename="C:\projects\moq4\src\Moq\SequenceSetup.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.MethodExpectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AddBehavior" signature="(Moq.Behavior)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecuteCore" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Setup" filename="C:\projects\moq4\src\Moq\Setup.cs" line-rate="1" branch-rate="1" complexity="9">
          <methods>
            <method name="Condition" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expectation" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ISetup.get_InnerMock" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="InnerMocks" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsConditional" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsOverridden" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsVerifiable" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Mock" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="OriginalExpression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsMatched" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.Expectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Execute" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MarkAsOverridden" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="MarkAsVerifiable" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Matches" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Matches" signature="(Moq.MethodExpectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetOutParameters" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Verify" signature="(System.Boolean,System.Func`2&lt;Moq.ISetup,System.Boolean&gt;,System.Collections.Generic.HashSet`1&lt;Moq.Mock&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySelf" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="ResetCore" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Verify" signature="(System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifyAll" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="Verify" signature="(System.Boolean,System.Func`2&lt;Moq.ISetup,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TryGetInnerMockFrom" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.SetupCollection" filename="C:\projects\moq4\src\Moq\SetupCollection.cs" line-rate="1" branch-rate="1" complexity="14">
          <methods>
            <method name="Count" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Item" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Add" signature="(Moq.Setup)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="MarkOverriddenSetups" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="Clear" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="FindAll" signature="(System.Func`2&lt;Moq.Setup,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="FindLast" signature="(System.Func`2&lt;Moq.Setup,System.Boolean&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Reset" signature="()" line-rate="1" branch-rate="1" complexity="3">
              <lines />
            </method>
            <method name="GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="2">
              <lines />
            </method>
            <method name="System.Collections.IEnumerable.GetEnumerator" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.SetupWithOutParameterSupport" filename="C:\projects\moq4\src\Moq\SetupWithOutParameterSupport.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name=".ctor" signature="(System.Linq.Expressions.Expression,Moq.Mock,Moq.MethodExpectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetOutParameters" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetOutValues" signature="(System.Collections.Generic.IReadOnlyList`1&lt;System.Linq.Expressions.Expression&gt;,System.Reflection.ParameterInfo[])" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.StringBuilderExtensions" filename="C:\projects\moq4\src\Moq\StringBuilderExtensions.AppendExpression.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.Expression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendElementInit" signature="(System.Text.StringBuilder,System.Linq.Expressions.ElementInit)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.UnaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.BinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.TypeBinaryExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.ConditionalExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.ParameterExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.MemberExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.MethodCallExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.IndexExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.LambdaExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.NewExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.NewArrayExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.InvocationExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.MemberInitExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,System.Linq.Expressions.ListInitExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendExpression" signature="(System.Text.StringBuilder,Moq.MatchExpression)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.StringBuilderExtensions" filename="C:\projects\moq4\src\Moq\StringBuilderExtensions.cs" line-rate="1" branch-rate="1" complexity="NaN">
          <methods>
            <method name="Append" signature="(System.Text.StringBuilder,System.String,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendCommaSeparated" signature="(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Func`3&lt;System.Text.StringBuilder,T,System.Text.StringBuilder&gt;,System.String)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendCommaSeparated" signature="(System.Text.StringBuilder,System.Collections.Generic.IEnumerable`1&lt;T&gt;,System.Func`3&lt;System.Text.StringBuilder,T,System.Text.StringBuilder&gt;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendIndented" signature="(System.Text.StringBuilder,System.String,System.Int32,System.Char)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendNameOf" signature="(System.Text.StringBuilder,System.Reflection.MethodBase,System.Boolean)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendNameOf" signature="(System.Text.StringBuilder,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendParameterType" signature="(System.Text.StringBuilder,System.Reflection.ParameterInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendValueOf" signature="(System.Text.StringBuilder,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="TrimEnd" signature="(System.Text.StringBuilder)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.StubbedPropertiesSetup" filename="C:\projects\moq4\src\Moq\StubbedPropertiesSetup.cs" line-rate="1" branch-rate="1" complexity="7">
          <methods>
            <method name="DefaultValueProvider" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.Mock,Moq.DefaultValueProvider)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="SetProperty" signature="(System.String,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecuteCore" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="VerifySelf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(Moq.Mock)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Expectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="IsMatch" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get_InnerMocks" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.StubbedPropertySetup" filename="C:\projects\moq4\src\Moq\StubbedPropertySetup.cs" line-rate="1" branch-rate="1" complexity="11">
          <methods>
            <method name=".ctor" signature="(Moq.Mock,System.Linq.Expressions.LambdaExpression,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ExecuteCore" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="VerifySelf" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Expression" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Linq.Expressions.LambdaExpression,System.Reflection.MethodInfo,System.Reflection.MethodInfo)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Expectation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="5">
              <lines />
            </method>
            <method name="IsMatch" signature="(Moq.Invocation)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="get_InnerMocks" signature="()" line-rate="1" branch-rate="1" complexity="4">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.Times" filename="C:\projects\moq4\src\Moq\Times.cs" line-rate="1" branch-rate="1" complexity="16">
          <methods>
            <method name=".ctor" signature="(Moq.Times/Kind,System.Int32,System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Deconstruct" signature="(System.Int32&amp;,System.Int32&amp;)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AtLeast" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AtLeastOnce" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AtMost" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AtMostOnce" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Between" signature="(System.Int32,System.Int32,Moq.Range)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Exactly" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Never" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Once" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="Equals" signature="(Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Equals" signature="(System.Object)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetHashCode" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="op_Equality" signature="(Moq.Times,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="op_Inequality" signature="(Moq.Times,Moq.Times)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="ToString" signature="()" line-rate="1" branch-rate="1" complexity="11">
              <lines />
            </method>
            <method name="GetExceptionMessage" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="Validate" signature="(System.Int32)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="Moq.TypeMatcherAttribute" filename="C:\projects\moq4\src\Moq\TypeMatcherAttribute.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name="Type" signature="()" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name=".ctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name=".ctor" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
        <class name="TypeNameFormatter.TypeName" filename="C:\projects\moq4\src\Moq\obj\TypeNameFormatter.cs" line-rate="1" branch-rate="1" complexity="1">
          <methods>
            <method name=".cctor" signature="()" line-rate="1" branch-rate="1" complexity="1">
              <lines />
            </method>
            <method name="AppendFormattedName" signature="(System.Text.StringBuilder,System.Type,TypeNameFormatter.TypeNameFormatOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetFormattedName" signature="(System.Type,TypeNameFormatter.TypeNameFormatOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="AppendFormattedName" signature="(System.Text.StringBuilder,System.Type,TypeNameFormatter.TypeNameFormatOptions,System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsSet" signature="(TypeNameFormatter.TypeNameFormatOptions,TypeNameFormatter.TypeNameFormatOptions)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetDeclaredProperties" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="GetGenericTypeArguments" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsGenericType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
            <method name="IsConstructedGenericType" signature="(System.Type)" line-rate="1" branch-rate="1" complexity="NaN">
              <lines />
            </method>
          </methods>
          <lines />
        </class>
      </classes>
    </package>
  </packages>
</coverage>